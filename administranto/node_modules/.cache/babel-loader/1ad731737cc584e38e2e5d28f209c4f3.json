{"ast":null,"code":"var _jsxFileName = \"/Users/filibert/Documents/Education/M2/CP/Administranto/administranto/src/components.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskMenu = () => {\n  _s();\n\n  const [showTaskMenu, setShowTaskMenu] = React.useState(true);\n\n  const toggleTaskMenu = () => showTaskMenu ? setShowTaskMenu(false) : setShowTaskMenu(true);\n\n  const overlayed = {\n    position: 'fixed',\n    zIndex: '1'\n  };\n  return showTaskMenu ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlay\",\n    style: overlayed,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-menu-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Task \", showTaskMenu]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"exit-task-menu\",\n          onClick: toggleTaskMenu,\n          children: /*#__PURE__*/_jsxDEV(AiOutlineClose, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 85\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-menu-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Estimation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column-right\",\n            children: [/*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"buton-primary\",\n              children: \"done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(TaskMenu, \"GnZPB3XiB499z9SMo/7oWcd2dtc=\");\n\n_c = TaskMenu;\nexport function Form(props) {\n  _s2();\n\n  const [name, setName] = useState(\"\");\n  const [submit, setSubmit] = React.useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    alert('The name you entered was: ');\n  };\n\n  const spacing = {\n    padding: 10,\n    margin: 10\n  };\n  return submit ? /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: spacing,\n      children: [props.label, /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        style: spacing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      style: spacing,\n      children: [props.label, /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        style: spacing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Form, \"SxzIUwVdefBQ5+YinskLqTw6jSc=\");\n\n_c2 = Form;\nconst colorNames = ['Aquamarine', 'BlueViolet', 'Chartreuse', 'CornflowerBlue', 'Thistle', 'SpringGreen', 'SaddleBrown', 'PapayaWhip', 'MistyRose', 'White'];\nexport default function ColorPicker() {\n  _s3();\n\n  const [color, setColor] = useState('White');\n  const colorStyle = {\n    backgroundColor: color\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: colorStyle,\n    className: \"palette\",\n    children: colorNames.map(colorName => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"palette-cell\",\n      onClick: () => setColor(colorName),\n      style: {\n        backgroundColor: colorName\n      }\n    }, colorName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(ColorPicker, \"2636TzbgpHeT89XUeSAYqqNlv/k=\");\n\n_c3 = ColorPicker;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TaskMenu\");\n$RefreshReg$(_c2, \"Form\");\n$RefreshReg$(_c3, \"ColorPicker\");","map":{"version":3,"sources":["/Users/filibert/Documents/Education/M2/CP/Administranto/administranto/src/components.js"],"names":["React","useState","AiOutlineClose","TaskMenu","showTaskMenu","setShowTaskMenu","toggleTaskMenu","overlayed","position","zIndex","Form","props","name","setName","submit","setSubmit","handleSubmit","event","preventDefault","alert","spacing","padding","margin","label","e","target","value","colorNames","ColorPicker","color","setColor","colorStyle","backgroundColor","map","colorName"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {AiOutlineClose} from 'react-icons/ai';\n\nexport const TaskMenu = () => {\n\n    const [showTaskMenu, setShowTaskMenu] = React.useState(true)\n    \n    const toggleTaskMenu = () => showTaskMenu ? setShowTaskMenu(false) : setShowTaskMenu(true)\n\n    const overlayed = {\n        position: 'fixed',\n        zIndex: '1'\n    };\n    return ( \n        showTaskMenu ?\n            <div className='overlay' style={overlayed}>\n                <div className='task-menu' >\n                    <div className='task-menu-header' >\n                        <h2>Task {showTaskMenu}</h2>\n                        <button className='exit-task-menu' onClick={toggleTaskMenu}><AiOutlineClose /></button>  \n                    </div>\n                    <div className='task-menu-body'>\n                        <div class=\"row\">\n                            <div class=\"column-left\">\n                                <h3>Title</h3>\n                                <h3>Description</h3>\n                                <h3>Estimation</h3>\n                                <h3>Color</h3>\n                            </div>\n                            <div class=\"column-right\">\n                                <Form />\n                                <Form />\n                                <Form />\n                                <ColorPicker />\n                            </div>\n                            <div><button className='buton-primary'>done</button></div>\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        : null \n    );\n};\n\nexport function Form(props) {\n  const [name, setName] = useState(\"\");\n  const [submit, setSubmit] = React.useState(false)\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert('The name you entered was: ');\n  }\n\n  const spacing = {\n    padding: 10,\n    margin: 10\n    };\n\n  return (\n    submit ?\n    <form onSubmit={handleSubmit}>\n      <label style={spacing} >{props.label}\n        <input \n          type=\"text\" \n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          style={spacing}\n        />\n      </label>\n      <input type=\"submit\" />\n    </form>\n    :\n    <form>\n      <label style={spacing} >{props.label}\n        <input \n          type=\"text\" \n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          style={spacing}\n        />\n      </label>\n    </form>\n  )\n}\n\nconst colorNames = ['Aquamarine', 'BlueViolet', 'Chartreuse', 'CornflowerBlue', 'Thistle', 'SpringGreen', 'SaddleBrown', 'PapayaWhip', 'MistyRose','White'];\n\nexport default function ColorPicker() {\n  const [color, setColor] = useState('White');\n\n const colorStyle = {backgroundColor: color};\n\n  return (\n    <div style={colorStyle} className='palette'>\n      {/* <p>Selected color: {color}</p> */}\n      {colorNames.map((colorName)=>(\n        <div\n            className='palette-cell'\n            onClick={() => setColor(colorName)} \n            key={colorName}\n            style={{backgroundColor:colorName}}>\n            \n       \t    {/* {colorName} */}\n      \t</div>\n      ))}\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}