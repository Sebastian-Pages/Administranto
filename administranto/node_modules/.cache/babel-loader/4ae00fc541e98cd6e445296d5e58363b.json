{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\nexport const onDragEnd = (result, columns, setColumns, sprint) => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n\n  if (sprint && result.destination.droppableId === \"100\") {\n    console.log(\"Tried to put task in backlog during Sprint\", result.destination.droppableId);\n    return;\n  }\n\n  if (sprint && result.source.droppableId === \"100\" && result.destination.droppableId !== \"42\") {\n    console.log(\"Tried to take task out of backlog during Sprint\", result.destination.droppableId);\n    return;\n  }\n\n  if (sprint && result.source.droppableId !== \"100\" && result.destination.droppableId == \"42\") {\n    console.log(\"Tried to delete task during Sprint\", result.destination.droppableId);\n    alert(\"You must complete task or archive it!\");\n    return;\n  }\n\n  if (result.destination.droppableId === \"42\") {\n    console.log(\"delete: \", result.destination);\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [];\n    const [removed] = sourceItems.splice(source.index, 1);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        items: sourceItems\n      }\n    });\n    return;\n  }\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: { ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\nexport function useForceUpdate() {\n  _s();\n\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n_s(useForceUpdate, \"qPBOvRc2Co1iWTsdTL0g7j/rpjU=\");\n\nlet newItem;\n\nconst getNewItem = data => {\n  data.item === 'Tomato' ? void 0 : console.log(\"update item\", data.item);\n  newItem = {\n    id: uuid(),\n    content: data.item.content,\n    description: data.item.description,\n    estimation: data.item.estimation,\n    color: data.item.color\n  };\n};\n\nlet newProject;\n\nconst getNewProject = data => {\n  console.log(\"update item\", data);\n  newProject = {\n    id: uuid(),\n    name: data.name\n  };\n};","map":{"version":3,"sources":["/Users/filibert/Documents/Education/M2/CP/Administranto/administranto/src/Functions.js"],"names":["React","useEffect","v4","uuid","onDragEnd","result","columns","setColumns","sprint","destination","source","droppableId","console","log","alert","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","index","column","copiedItems","useForceUpdate","value","setValue","useState","newItem","getNewItem","data","item","id","content","description","estimation","color","newProject","getNewProject","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { v4 as uuid } from 'uuid'\n\nexport const onDragEnd = (result, columns, setColumns, sprint) => {\n\n    if (!result.destination) return;\n    const { source, destination } = result;\n\n    if (sprint && result.destination.droppableId === \"100\") {\n        console.log(\"Tried to put task in backlog during Sprint\", result.destination.droppableId)\n        return;\n    }\n    if (sprint && result.source.droppableId === \"100\" && result.destination.droppableId !== \"42\") {\n        console.log(\"Tried to take task out of backlog during Sprint\", result.destination.droppableId)\n        return;\n    }\n    if (sprint && result.source.droppableId !== \"100\" && result.destination.droppableId == \"42\") {\n        console.log(\"Tried to delete task during Sprint\", result.destination.droppableId)\n        alert(\"You must complete task or archive it!\");\n        return;\n    }\n    if (result.destination.droppableId === \"42\") {\n        console.log(\"delete: \", result.destination);\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [];\n\n        const [removed] = sourceItems.splice(source.index, 1);\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...sourceColumn,\n                items: sourceItems\n            },\n\n        })\n        return;\n    }\n    if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...sourceColumn,\n                items: sourceItems\n            },\n            [destination.droppableId]: {\n                ...destColumn,\n                items: destItems\n            }\n        })\n\n    } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...column,\n                items: copiedItems\n            }\n        })\n    }\n};\n\n\nexport function useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n\n\nlet newItem;\nconst getNewItem = (data) => {\n    (data.item === 'Tomato') ? void(0): console.log(\"update item\", data.item);\n    newItem = {\n        id: uuid(),\n        content: data.item.content,\n        description: data.item.description,\n        estimation: data.item.estimation,\n        color: data.item.color\n    }\n}\n\nlet newProject;\nconst getNewProject = (data) => {\n    console.log(\"update item\", data);\n    newProject = {\n        id: uuid(),\n        name: data.name\n    }\n}"]},"metadata":{},"sourceType":"module"}